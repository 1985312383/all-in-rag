import{_ as p,c as r,a as n,b as i,e,d as a,w as t,r as h,o as k}from"./app-CFXp0Idr.js";const o="/all-in-rag/images/8_1_1.webp",c={};function g(u,s){const l=h("VPLink"),d=h("Mermaid");return k(),r("div",null,[s[8]||(s[8]=n(`<blockquote><p>经过前面十几天的鏖战也是终于来到了项目实战环节。接下来，通过一个完整的实战项目来把前面学到的知识串联起来，构建一个真正可用的RAG系统。</p></blockquote><h2 id="一、项目背景" tabindex="-1"><a class="header-anchor" href="#一、项目背景"><span>一、项目背景</span></a></h2><p>这个项目的灵感来自于笔者前段时间刷视频时，偶然看到了一个有趣的开源项目介绍——<a href="https://github.com/Anduin2017/HowToCook" target="_blank" rel="noopener noreferrer">程序员做饭指南</a>。这是一个菜谱项目，用Markdown格式记录了各种菜品的制作方法，从简单的家常菜到复杂的宴客菜，应有尽有。更完美的是，这个项目中每道菜的Markdown文件都严格使用统一的小标题。</p><p>看到这个项目，笔者立刻想到：能不能构建一个智能问答系统来解决我的选择困难症？每天面对&quot;今天吃什么&quot;这个世纪难题，如果有个AI助手能根据我的需求推荐菜品、告诉我怎么做，那该多好！于是就有了搭建这个<strong>尝尝咸淡RAG系统</strong>的想法。</p><h2 id="二、环境配置" tabindex="-1"><a class="header-anchor" href="#二、环境配置"><span>二、环境配置</span></a></h2><h3 id="_2-1-创建虚拟环境" tabindex="-1"><a class="header-anchor" href="#_2-1-创建虚拟环境"><span>2.1 创建虚拟环境</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用conda创建环境</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">conda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cook-rag-1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> python=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3.12.7</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">conda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> activate</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cook-rag-1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-安装核心依赖" tabindex="-1"><a class="header-anchor" href="#_2-2-安装核心依赖"><span>2.2 安装核心依赖</span></a></h3><p>老规矩，进入本章对应项目目录安装依赖包</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code/C8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 API Key 已经配置好了，可以直接使用下面命令运行项目</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-3-申请kimi-api-key" tabindex="-1"><a class="header-anchor" href="#_2-3-申请kimi-api-key"><span>2.3 申请Kimi API Key</span></a></h3><p>Kimi2 发布第八天来尝尝咸淡，申请地址：<a href="https://platform.moonshot.cn/console/api-keys" target="_blank" rel="noopener noreferrer">Kimi API官网</a>。目前注册会送15元的额度，绰绰有余了。</p><h3 id="_2-4-api配置" tabindex="-1"><a class="header-anchor" href="#_2-4-api配置"><span>2.4 API配置</span></a></h3>`,15)),i("p",null,[s[1]||(s[1]=a("参考前面章节 ",-1)),e(l,{href:"../chapter1/2.preparation.md"},{default:t(()=>[...s[0]||(s[0]=[i("strong",null,"环境准备",-1)])]),_:1}),s[2]||(s[2]=a(" 中关于api_key的配置方法。在windows下，配置完成后应该如下图所示：",-1))]),s[9]||(s[9]=n('<figure><img src="'+o+`" alt="API配置" tabindex="0" loading="lazy"><figcaption>API配置</figcaption></figure><h2 id="三、项目架构" tabindex="-1"><a class="header-anchor" href="#三、项目架构"><span>三、项目架构</span></a></h2><h3 id="_3-1-项目目标" tabindex="-1"><a class="header-anchor" href="#_3-1-项目目标"><span>3.1 项目目标</span></a></h3><p>我们将基于HowToCook项目的菜谱数据，构建一个智能的食谱问答系统。用户可以：</p><ul><li>询问具体菜品的制作方法：&quot;宫保鸡丁怎么做？&quot;</li><li>寻求菜品推荐：&quot;推荐几个简单的素菜&quot;</li><li>获取食材信息：&quot;红烧肉需要什么食材？&quot;</li></ul><h3 id="_3-2-数据分析" tabindex="-1"><a class="header-anchor" href="#_3-2-数据分析"><span>3.2 数据分析</span></a></h3><h4 id="_3-2-1-文档分析" tabindex="-1"><a class="header-anchor" href="#_3-2-1-文档分析"><span>3.2.1 文档分析</span></a></h4><p>HowToCook项目包含了大约300多个Markdown格式的菜谱文件。这些菜谱有两个关键特点：一是结构高度规整，每个文件都严格按照统一的格式来组织内容；二是内容篇幅较短，单个菜谱通常在700字左右。</p><p>打开任意一个菜谱文件，可以发现它们都遵循着相似的结构模式。通常以菜品做法作为一级标题，开头会有一段简介和难度评级，然后分为&quot;必备原料和工具&quot;、&quot;计算&quot;、&quot;操作&quot;、&quot;附加内容&quot;等几个主要部分。比如西红柿炒鸡蛋这道菜：</p><div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-markdown"><span class="line"><span style="--shiki-light:#999999;--shiki-light-font-weight:bold;--shiki-dark:#666666;--shiki-dark-font-weight:bold;">#</span><span style="--shiki-light:#1C6B48;--shiki-light-font-weight:bold;--shiki-dark:#4D9375;--shiki-dark-font-weight:bold;"> 西红柿炒鸡蛋的做法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">西红柿炒蛋是中国家常几乎最常见的一道菜肴...</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">预估烹饪难度：★★</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-light-font-weight:bold;--shiki-dark:#666666;--shiki-dark-font-weight:bold;">##</span><span style="--shiki-light:#1C6B48;--shiki-light-font-weight:bold;--shiki-dark:#4D9375;--shiki-dark-font-weight:bold;"> 必备原料和工具</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 西红柿</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 鸡蛋</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 食用油...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-light-font-weight:bold;--shiki-dark:#666666;--shiki-dark-font-weight:bold;">##</span><span style="--shiki-light:#1C6B48;--shiki-light-font-weight:bold;--shiki-dark:#4D9375;--shiki-dark-font-weight:bold;"> 计算</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">每次制作前需要确定计划做几份...</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 西红柿 = 1 个（约 180g） * 份数</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 鸡蛋 = 1.5 个 * 份数，向上取整...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-light-font-weight:bold;--shiki-dark:#666666;--shiki-dark-font-weight:bold;">##</span><span style="--shiki-light:#1C6B48;--shiki-light-font-weight:bold;--shiki-dark:#4D9375;--shiki-dark-font-weight:bold;"> 操作</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 西红柿洗净</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 可选：去掉西红柿的外表皮...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-light-font-weight:bold;--shiki-dark:#666666;--shiki-dark-font-weight:bold;">##</span><span style="--shiki-light:#1C6B48;--shiki-light-font-weight:bold;--shiki-dark:#4D9375;--shiki-dark-font-weight:bold;"> 附加内容</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">这道菜根据不同的口味偏好，存在诸多版本...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),i("p",null,[s[4]||(s[4]=a("从数据上来看，这种高度结构化的数据不需要过多处理就可以直接用于RAG系统构建。还记得我们在第2章学过的",-1)),e(l,{href:"../chapter2/05_text_chunking.md#34-%E5%9F%BA%E4%BA%8E%E6%96%87%E6%A1%A3%E7%BB%93%E6%9E%84%E7%9A%84%E5%88%86%E5%9D%97"},{default:t(()=>[...s[3]||(s[3]=[i("strong",null,"Markdown结构分块",-1)])]),_:1}),s[5]||(s[5]=a("吗？这个数据完全契合那种按标题层级分块的思路。更重要的是，每个菜谱文件的内容都不算太长，单个章节的内容通常在几百字左右，这意味着可以直接按照标题进行分块，而不用担心第2章提到的那个问题——某个章节内容过长超出模型上下文窗口，需要与常规分块方法（如",-1)),s[6]||(s[6]=i("code",null,"RecursiveCharacterTextSplitter",-1)),s[7]||(s[7]=a("）组合使用。",-1))]),s[10]||(s[10]=n('<h4 id="_3-2-2-结构分块局限" tabindex="-1"><a class="header-anchor" href="#_3-2-2-结构分块局限"><span>3.2.2 结构分块局限</span></a></h4><p>虽然Markdown结构分块看起来很理想，但在实际使用中可能会遇到一个问题：按照标题严格分块会把内容切得太细，导致上下文信息不完整。比如用户问&quot;宫保鸡丁怎么做&quot;，如果严格按标题分块，可能只检索到&quot;操作&quot;这一个章节，但缺少了&quot;必备原料和工具&quot;的信息，LLM就无法给出完整的制作指导。甚至有时候检索到的是&quot;附加内容&quot;中的某个变化做法，没有基础制作步骤，回答就会显得莫名其妙。如果你尝试直接把整个菜谱文档作为一个块，可以发现效果反而比结构分块要好，因为上下文信息是完整的。</p><p>为了解决这个矛盾，可以采用父子文本块的策略：用小的子块进行精确检索，但在生成时传递完整的父文档给LLM。这种方法在第3章的索引优化中虽然没有专门介绍，但本质上也属于上下文拓展的一种应用。通过这种方式，我们既保证了检索的精确性，又确保了生成时上下文的完整性。</p><blockquote><p>反正都是把整个文档传给LLM，我为什么不直接用整个文档分块呢？</p></blockquote><p>这个问题问得很好！关键在于当用户问&quot;宫保鸡丁需要什么调料&quot;时，如果直接用整个文档做向量检索，这个具体问题在整个文档中的占比很小，很可能检索不到或者排名很靠后。但如果用小块检索，&quot;必备原料和工具&quot;这个章节就能精确匹配用户的需求。</p><p>简单来说，这种设计是&quot;小块检索，大块生成&quot;——用小块的精确性找到相关内容，用大块的完整性保证回答质量。如果直接用整个文档分块，就失去了检索的精确性优势。</p><h3 id="_3-3-整体架构" tabindex="-1"><a class="header-anchor" href="#_3-3-整体架构"><span>3.3 整体架构</span></a></h3><p>数据处理好之后，剩余的部分就是四个主要流程的组合，每个流程对工具进行筛选和优化后就可以构建出一个简单的rag系统。当前项目的架构如下图所示：</p>',8)),e(d,{code:"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"}),s[11]||(s[11]=n(`<h3 id="_3-4-项目结构" tabindex="-1"><a class="header-anchor" href="#_3-4-项目结构"><span>3.4 项目结构</span></a></h3><p>基于上面的架构，可以构建出如下项目结构：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-text"><span class="line"><span>code/C8/</span></span>
<span class="line"><span>├── config.py                   # 配置管理</span></span>
<span class="line"><span>├── main.py                     # 主程序入口</span></span>
<span class="line"><span>├── requirements.txt            # 依赖列表</span></span>
<span class="line"><span>├── rag_modules/               # 核心模块</span></span>
<span class="line"><span>│   ├── __init__.py</span></span>
<span class="line"><span>│   ├── data_preparation.py    # 数据准备模块</span></span>
<span class="line"><span>│   ├── index_construction.py  # 索引构建模块</span></span>
<span class="line"><span>│   ├── retrieval_optimization.py # 检索优化模块</span></span>
<span class="line"><span>│   └── generation_integration.py # 生成集成模块</span></span>
<span class="line"><span>└── vector_index/              # 向量索引缓存（自动生成）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>本节从项目背景出发，完成了RAG系统的环境配置和整体架构设计。从下一节开始，我们将深入学习各个模块的具体实现，看看如何将这些设计思路转化为可运行的代码。</p>`,5))])}const v=p(c,[["render",g]]),m=JSON.parse('{"path":"/chapter8/1.env_architecture.html","title":"第一节 环境配置与项目架构","lang":"zh-CN","frontmatter":{"createTime":"2025/09/28 17:32:01","title":"第一节 环境配置与项目架构"},"readingTime":{"minutes":8.35,"words":2505},"git":{"createdTime":1753066530000,"updatedTime":1759129919000,"contributors":[{"name":"FutureUnreal","username":"FutureUnreal","email":"127503693+FutureUnreal@users.noreply.github.com","commits":4,"avatar":"https://avatars.githubusercontent.com/FutureUnreal?v=4","url":"https://github.com/FutureUnreal"},{"name":"1985312383","username":"1985312383","email":"56398475+1985312383@users.noreply.github.com","commits":1,"avatar":"https://avatars.githubusercontent.com/1985312383?v=4","url":"https://github.com/1985312383"}]},"filePathRelative":"chapter8/1.env_architecture.md","headers":[]}');export{v as comp,m as data};
