import{_ as e,c as n,a as i,e as l,r as t,o as r}from"./app-CFXp0Idr.js";const h="/all-in-rag/images/1_4_2_1.png",o="/all-in-rag/images/1_4_3_1.png",p="/all-in-rag/images/1_4_3_2.png",d="/all-in-rag/images/1_4_3_3.png",g={};function k(c,s){const a=t("Mermaid");return r(),n("div",null,[s[0]||(s[0]=i('<h2 id="一、什么是知识图谱" tabindex="-1"><a class="header-anchor" href="#一、什么是知识图谱"><span>一、什么是知识图谱</span></a></h2><p><strong>知识图谱（Knowledge Graph, KG）</strong> 源于自然语言理解，其目标是用一种结构化的方式，来描述现实世界中的实体及其相互关系。它主要由两个核心要素构成：</p><ol><li><strong>节点（Nodes）</strong>：代表现实世界中的“实体”（Entities），例如一个人、一部电影、一家公司或一个具体概念。</li><li><strong>边（Edges）</strong>：代表实体与实体之间的“关系”（Relations）。</li></ol><p>这些元素共同构成了一个庞大的语义网络，其基本结构可以表示为 <strong>（实体）- [关系] -&gt; （实体）</strong> 的三元组（Triples）。例如，“饺子”和“哪吒2”是两个实体，“导演”就是它们之间的关系，构成一个知识三元组：（饺子）- [导演] -&gt; （哪吒2）。</p><h2 id="二、知识图谱的应用" tabindex="-1"><a class="header-anchor" href="#二、知识图谱的应用"><span>二、知识图谱的应用</span></a></h2><p>知识图谱并非一个孤立的学术概念，它在工业界有着广泛且深入的应用，尤其是在需要深度结合领域知识的场景中。</p><h3 id="_2-1-风险识别与网络分析" tabindex="-1"><a class="header-anchor" href="#_2-1-风险识别与网络分析"><span>2.1 风险识别与网络分析</span></a></h3><p>俗话说“近朱者赤，近墨者黑”，在许多领域，一个实体的风险或属性，往往与其关联的其他实体有很强的相关性。知识图谱正是挖掘这种关联性的利器。</p><ul><li><strong>犯罪网络侦查</strong>：公安部门可以利用通话记录、社交关系、转账流水等信息构建犯罪嫌疑人网络。在这个网络中，如果某个节点与多个已知的犯罪分子有直接或间接的联系，那么他参与犯罪的可能性就大大增加。通过分析网络中的核心人物（连接数最多的节点）和资金流向，可以有效地打击整个犯罪团伙。</li><li><strong>信用卡反欺诈</strong>：银行可以将申请人的信息（如电话、地址、公司）构建成一个庞大的关系网络。通过分析这张网络，可以识别出“欺诈团伙”——例如，多个申请人共享同一个联系电话或家庭住址，或者与已知的欺诈分子有紧密的社交关系。</li></ul><h3 id="_2-2-智能诊断与运维" tabindex="-1"><a class="header-anchor" href="#_2-2-智能诊断与运维"><span>2.2 智能诊断与运维</span></a></h3><ul><li><strong>工业设备运维</strong>：将设备的各种“故障现象”、“故障原因”、“解决方案”和“所需零件”构建成知识图谱。当设备出现问题时，系统可以根据上报的现象，在图谱中进行推理，快速定位可能的原因，并给出维修建议，甚至可以提示维修人员需要携带哪些工具和备件，从而提高维修效率。</li><li><strong>医疗辅助诊断</strong>：医疗领域知识繁杂，可以通过构建“病症”、“疾病”、“检查项目”、“治疗方案”、“药品”之间的关系图谱。医生输入患者的症状后，系统可以辅助推荐需要进行的检查，并根据检查结果在图谱中推理，给出可能的诊断建议和治疗方案，帮助实现规范化诊疗。</li></ul><h3 id="_2-3-特定领域聊天机器人" tabindex="-1"><a class="header-anchor" href="#_2-3-特定领域聊天机器人"><span>2.3 特定领域聊天机器人</span></a></h3><p>对于通用领域的开放式聊天，大语言模型（LLM）已展现出强大的能力。但在许多垂直领域，基于知识图谱的问答系统（KBQA）因其答案的准确性和可解释性，仍然具有不可替代的价值。其工作流程通常如下：</p><ol><li><strong>意图识别</strong>：首先判断用户提问的意图。例如，“我想买一张明天上午的故宫门票”这个问题的意图是“票务预订”。</li><li><strong>槽位填充 (实体抽取)</strong>：从问题中抽取出关键信息，即“实体”。例如：<code>景点: 故宫</code>, <code>时间: 明天上午</code>, <code>数量: 一张</code>。</li><li><strong>知识查询</strong>：利用抽取出的实体，在知识图谱（或数据库）中进行精确查询。</li><li><strong>回复生成</strong>：将查询到的结果，通过预设的模板生成自然语言回复。</li></ol><p>这种方式虽然不如 LLM 灵活，但在机票预订、酒店查询、银行客服等业务逻辑明确的场景中，能够提供更加可靠和可控的服务。</p><h2 id="三、知识图谱的构建" tabindex="-1"><a class="header-anchor" href="#三、知识图谱的构建"><span>三、知识图谱的构建</span></a></h2><p>如何从海量的、非结构化的文本（如新闻、财报、医疗记录）中，自动地构建出结构化的知识图谱，是整个技术流程的核心挑战。</p><h3 id="_3-1-经典构建流程" tabindex="-1"><a class="header-anchor" href="#_3-1-经典构建流程"><span>3.1 经典构建流程</span></a></h3><p>传统的知识图谱构建过程主要依赖于两项关键的 NLP 技术：</p><ol><li><strong>命名实体识别 (Named Entity Recognition, NER)</strong>：从文本中识别并抽取出特定类别的实体。例如，在“英伟达发布了专为 AI 设计的 Blackwell 芯片”这句话中，识别出“英伟达”（公司）、“Blackwell”（产品）。这些被抽取的实体将成为知识图谱中的 <strong>节点</strong>。</li><li><strong>关系抽取 (Relation Extraction, RE)</strong>：在识别出实体的基础上，进一步判断实体与实体之间存在何种语义关系。在上面的例子中，模型需要判断“英伟达”和“Blackwell”之间的关系是“发布”。这个关系将成为连接两个节点的 <strong>边</strong>。</li></ol><p>通过对大量文本进行这两步处理，我们就能源源不断地抽取出知识三元组，最终汇聚成一个庞大的知识图谱。</p><h3 id="_3-2-大模型带来的革新" tabindex="-1"><a class="header-anchor" href="#_3-2-大模型带来的革新"><span>3.2 大模型带来的革新</span></a></h3><p>随着大语言模型的兴起，传统的 NLP 任务流程正在被重塑。LLM 同样具备强大的实体识别和关系抽取能力，但这并不意味着对传统流程的简单替代，而是呈现出深度融合的趋势。</p><ul><li><strong>局限性与挑战</strong>：完全依赖 LLM 会面临成本高昂、数据隐私（使用闭源 API 时）、以及“幻觉”问题，即模型可能会编造事实。</li><li><strong>融合方案</strong>：为了结合知识图谱的准确性和大模型的推理能力，微软提出了 GraphRAG。原理是将知识图谱作为一个可靠、可随时更新的 <strong>外部知识库</strong>，并基于图结构进行“子图检索”（如社区发现、路径搜索等），而非检索孤立事实。当用户提问时： <ol><li>利用模型从问题中识别出核心实体与约束。</li><li>在图中检索与之高度相关的子图（社区/路径/邻域），获得准确且可解释的事实与关系。</li><li>将该子图的结构化信息作为上下文，连同原始问题一起输入给大语言模型，生成基于证据的答案。</li></ol></li></ul><h2 id="四、图数据库-neo4j" tabindex="-1"><a class="header-anchor" href="#四、图数据库-neo4j"><span>四、图数据库：Neo4j</span></a></h2><blockquote><p><a href="https://neo4j.com/docs/" target="_blank" rel="noopener noreferrer">Neo4j 官方文档</a></p></blockquote><p>知识图谱需要专门的数据库进行存储和查询，这类数据库被称为 <strong>图数据库 (Graph Database)</strong>。其中，与传统的关系型数据库（如 MySQL）相比，图数据库的优势在于其对“关系”的查询性能。对于需要进行多层关系遍历的复杂查询（例如，查询“我朋友的朋友”），图数据库的效果远超关系型数据库。而 <strong>Neo4j</strong> 就是目前比较流行的一款开源图数据库。</p><h3 id="_4-1-核心概念" tabindex="-1"><a class="header-anchor" href="#_4-1-核心概念"><span>4.1 核心概念</span></a></h3><p>Neo4j 的数据模型主要包含以下几个概念：</p><ul><li><p><strong>节点 (Node)</strong>：节点是图中的基本数据单元，用于表示现实世界中的实体，例如一个人、一家公司、一本书或一个账户。在关系型数据库中，节点可以类比为表中的一行。</p></li><li><p><strong>标签 (Label)</strong>：用于为节点分类或打上“类型”标记。一个节点可以拥有一个或多个标签。例如，一个节点可以同时拥有 <code>:Person</code> 和 <code>:Author</code> 两个标签，表示这个人既是一个普通人，也是一位作者。</p></li><li><p><strong>关系 (Relationship)</strong>：这是图数据库的精髓所在，它以一种富有表现力的方式连接两个节点，并明确地定义了它们之间的联系。每个关系都具有以下特点：</p><ul><li><strong>有方向</strong>：关系总是从一个“起始节点”指向一个“结束节点”。</li><li><strong>有类型</strong>：每个关系都必须有一个类型（例如 <code>:FRIENDS_WITH</code>, <code>:PURCHASED</code>），用来描述连接的性质。</li><li><strong>可以拥有属性</strong>：和节点一样，关系也可以存储属性，例如，一个 <code>:PURCHASED</code> 关系可以有一个 <code>date</code> 属性来记录购买日期。</li></ul></li><li><p><strong>属性 (Property)</strong>：属性是以键值对（Key-Value）形式存储在节点和关系上的详细信息。键是字符串，值可以是各种基本数据类型（如字符串、数字、布尔值）或它们的数组。</p></li></ul><p>这四个概念共同构成了一个灵活而强大的数据模型。</p>',31)),l(a,{code:"eJxLL0osyFDwCeJSAALHaCXHnMzkVKuA1KLi/DyF6rzE3FQrBXWwoHqtUixYlVO0klN+EroaoBBchaOCrq6Ckreff3iwQnVxZh7QRAUjAyODWiWghJ2CExcAFsIhDQ=="}),s[1]||(s[1]=i(`<blockquote><p>在上图中，<code>Alice</code> 和 <code>Bob</code> 是 <strong>节点</strong>，<code>:Person</code> 是 <strong>标签</strong>，<code>{name: &#39;Alice&#39;}</code> 是 <strong>属性</strong>，<code>KNOWS</code> 则是连接它们的 <strong>关系</strong> 类型，而 <code>{since: 2020}</code> 是这段关系上的 <strong>属性</strong>。</p></blockquote><h3 id="_4-2-查询语言-cypher" tabindex="-1"><a class="header-anchor" href="#_4-2-查询语言-cypher"><span>4.2 查询语言：Cypher</span></a></h3><p>Cypher 是 Neo4j 的声明式图形查询语言，它的语法灵感来源于 SQL，但针对图的特性进行了优化。通过 Cypher，我们可以用一种直观且高效的方式来查询和操作图数据。</p><p>例如，要查找在电影《黑客帝国》(The Matrix) 中出演过的所有演员，可以使用以下查询：</p><div class="language-cypher line-numbers-mode" data-highlighter="shiki" data-ext="cypher" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cypher"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">MATCH</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">actor</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Person</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">[:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ACTED_IN</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">]</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">movie</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Movie</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &#39;The Matrix&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RETURN</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> actor</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>官方的 Cypher 语法速查表（<a href="https://neo4j.com/docs/cypher-refcard/4.4/" target="_blank" rel="noopener noreferrer">在线版本</a>）汇总了常用的命令、操作符和语法结构，可供读者快速查阅。</p><div align="center"><img src="`+h+'" alt="Cypher 语法速查表" width="100%"><p>图 1.1: Cypher 语法速查表 (Cypher Refcard)</p></div><h3 id="_4-3-安装与使用" tabindex="-1"><a class="header-anchor" href="#_4-3-安装与使用"><span>4.3 安装与使用</span></a></h3><p>对于初学者和开发者，推荐以下两种主流的安装方式。</p><ol><li><p><strong>Neo4j Desktop (推荐用于本地学习)</strong></p><ul><li><strong>安装</strong>: <ol><li>访问 <a href="https://neo4j.com/download/" target="_blank" rel="noopener noreferrer">Neo4j 官网</a>，在 “Neo4j for Desktop” 板块点击 “Download” 按钮。<div align="center"><img src="'+o+'" alt="Neo4j Desktop 下载页面" width="100%"><p>图 1.2: 在官网点击下载</p></div></li><li>页面会跳转至一个注册表单。可以填写任意信息，然后点击 “Download Desktop” 按钮，浏览器将自动开始下载安装包。<div align="center"><img src="'+p+'" alt="下载前填写表单" width="100%"><p>图 1.3: 填写注册表单</p></div></li><li>下载完成后，双击安装文件，程序会自动进行安装。</li><li>安装完成后首次启动，会看到许可协议界面，点击 “Continue” 即可完成最后的设置。<div align="center"><img src="'+d+`" alt="同意许可协议" width="100%"><p>图 1.4: 首次启动并同意许可协议</p></div></li></ol></li></ul></li><li><p><strong>Docker (推荐用于服务器部署与跨平台开发)</strong></p><ul><li><strong>安装</strong>: 只需一行命令即可完成拉取镜像和启动容器。<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-neo4j</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 7474:7474</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 7687:7687</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    -v</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/neo4j/data:/data</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    -v</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/neo4j/logs:/logs</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    --env</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> NEO4J_AUTH=neo4j/password</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    neo4j:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>参数说明</strong>: <ul><li><code>-p 7474:7474</code>: 将容器的 HTTP 端口映射到本机，用于浏览器访问。</li><li><code>-p 7687:7687</code>: 将容器的 Bolt 驱动端口映射到本机，用于代码连接。</li><li><code>-v $HOME/neo4j/data:/data</code>: 将数据目录挂载到本机，确保数据持久化。</li><li><code>--env NEO4J_AUTH=neo4j/password</code>: 设置数据库的初始用户名和密码（此处为 <code>neo4j/password</code>）。</li><li><code>neo4j:latest</code>: 使用最新的官方镜像。</li></ul></li></ul></li></ol>`,10))])}const y=e(g,[["render",k]]),m=JSON.parse('{"path":"/chapter11/1.knowledge_graph.html","title":"第一节 知识图谱与 Neo4j 安装","lang":"zh-CN","frontmatter":{"createTime":"2025/09/28 17:32:01","title":"第一节 知识图谱与 Neo4j 安装"},"readingTime":{"minutes":9.42,"words":2826},"git":{"createdTime":1758953601000,"updatedTime":1759129919000,"contributors":[{"name":"FutureUnreal","username":"FutureUnreal","email":"42101210307@stu.xpu.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/FutureUnreal?v=4","url":"https://github.com/FutureUnreal"},{"name":"1985312383","username":"1985312383","email":"56398475+1985312383@users.noreply.github.com","commits":1,"avatar":"https://avatars.githubusercontent.com/1985312383?v=4","url":"https://github.com/1985312383"}]},"filePathRelative":"chapter11/1.knowledge_graph.md","headers":[]}');export{y as comp,m as data};
