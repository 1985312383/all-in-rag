import{_ as i,c as t,a,o as n}from"./app-CFXp0Idr.js";const e={};function d(l,s){return n(),t("div",null,[...s[0]||(s[0]=[a(`<blockquote><p>虽然本节内容在实际应用中非常重要，但是由于各种文档加载器的迭代更新，以及各类 AI 应用的不同需求，具体选择需要根据实际情况。本节仅作简单引入，但请务必<strong>重视数据加载</strong>环节，<strong>“垃圾进，垃圾出 (Garbage In, Garbage Out)”</strong> ——高质量输入是高质量输出的前提。</p></blockquote><h2 id="一、文档加载器" tabindex="-1"><a class="header-anchor" href="#一、文档加载器"><span>一、文档加载器</span></a></h2><p>在RAG系统中，<strong>数据加载</strong>是整个流水线的第一步，也是不可或缺的一步。文档加载器负责将各种格式的非结构化文档（如PDF、Word、Markdown、HTML等）转换为程序可以处理的结构化数据。数据加载的质量会直接影响后续的索引构建、检索效果和最终的生成质量。</p><h3 id="_1-1-主要功能" tabindex="-1"><a class="header-anchor" href="#_1-1-主要功能"><span>1.1 主要功能</span></a></h3><ul><li><p><strong>文档格式解析</strong> 将不同格式的文档（如PDF、Word、Markdown等）解析为文本内容。</p></li><li><p><strong>元数据提取</strong> 在解析文档内容的同时，提取相关的元数据信息，如文档来源、页码等。</p></li><li><p><strong>统一数据格式</strong> 将解析后的内容转换为统一的数据格式，便于后续处理。</p></li></ul><h3 id="_1-2-当前主流rag文档加载器" tabindex="-1"><a class="header-anchor" href="#_1-2-当前主流rag文档加载器"><span>1.2 当前主流RAG文档加载器</span></a></h3><table><thead><tr><th>工具名称</th><th>特点</th><th>适用场景</th><th>性能表现</th></tr></thead><tbody><tr><td><strong>PyMuPDF4LLM</strong></td><td>PDF→Markdown转换，OCR+表格识别</td><td>科研文献、技术手册</td><td>开源免费，GPU加速</td></tr><tr><td><strong>TextLoader</strong></td><td>基础文本文件加载</td><td>纯文本处理</td><td>轻量高效</td></tr><tr><td><strong>DirectoryLoader</strong></td><td>批量目录文件处理</td><td>混合格式文档库</td><td>支持多格式扩展</td></tr><tr><td><strong>Unstructured</strong></td><td>多格式文档解析</td><td>PDF、Word、HTML等</td><td>统一接口，智能解析</td></tr><tr><td><strong>FireCrawlLoader</strong></td><td>网页内容抓取</td><td>在线文档、新闻</td><td>实时内容获取</td></tr><tr><td><strong>LlamaParse</strong></td><td>深度PDF结构解析</td><td>法律合同、学术论文</td><td>解析精度高，商业API</td></tr><tr><td><strong>Docling</strong></td><td>模块化企业级解析</td><td>企业合同、报告</td><td>IBM生态兼容</td></tr><tr><td><strong>Marker</strong></td><td>PDF→Markdown，GPU加速</td><td>科研文献、书籍</td><td>专注PDF转换</td></tr><tr><td><strong>MinerU</strong></td><td>多模态集成解析</td><td>学术文献、财务报表</td><td>集成LayoutLMv3+YOLOv8</td></tr></tbody></table><h2 id="二、unstructured文档处理库" tabindex="-1"><a class="header-anchor" href="#二、unstructured文档处理库"><span>二、Unstructured文档处理库</span></a></h2><p><a href="https://docs.unstructured.io/open-source/" target="_blank" rel="noopener noreferrer"><strong>Unstructured</strong></a> 是一个专业的文档处理库，专门设计用于RAG和AI微调场景的非结构化数据预处理。提供了统一的接口来处理多种文档格式，是目前最受欢迎的文档加载解决方案之一。</p><h3 id="_2-1-unstructured的核心优势" tabindex="-1"><a class="header-anchor" href="#_2-1-unstructured的核心优势"><span>2.1 Unstructured的核心优势</span></a></h3><p><strong>格式支持广泛</strong></p><ul><li>支持多种文档格式：PDF、Word、Excel、HTML、Markdown等</li><li>统一的API接口，无需为不同格式编写不同代码</li></ul><p><strong>智能内容解析</strong></p><ul><li>自动识别文档结构：标题、段落、表格、列表等</li><li>保留文档元数据信息</li></ul><h3 id="_2-2-支持的文档元素类型" tabindex="-1"><a class="header-anchor" href="#_2-2-支持的文档元素类型"><span>2.2 <a href="https://docs.unstructured.io/open-source/concepts/document-elements" target="_blank" rel="noopener noreferrer">支持的文档元素类型</a></span></a></h3><p>Unstructured能够识别和分类以下文档元素：</p><table><thead><tr><th>元素类型</th><th>描述</th></tr></thead><tbody><tr><td><code>Title</code></td><td>文档标题</td></tr><tr><td><code>NarrativeText</code></td><td>由多个完整句子组成的正文文本，不包括标题、页眉、页脚和说明文字</td></tr><tr><td><code>ListItem</code></td><td>列表项，属于列表的正文文本元素</td></tr><tr><td><code>Table</code></td><td>表格</td></tr><tr><td><code>Image</code></td><td>图像元数据</td></tr><tr><td><code>Formula</code></td><td>公式</td></tr><tr><td><code>Address</code></td><td>物理地址</td></tr><tr><td><code>EmailAddress</code></td><td>邮箱地址</td></tr><tr><td><code>FigureCaption</code></td><td>图片标题/说明文字</td></tr><tr><td><code>Header</code></td><td>文档页眉</td></tr><tr><td><code>Footer</code></td><td>文档页脚</td></tr><tr><td><code>CodeSnippet</code></td><td>代码片段</td></tr><tr><td><code>PageBreak</code></td><td>页面分隔符</td></tr><tr><td><code>PageNumber</code></td><td>页码</td></tr><tr><td><code>UncategorizedText</code></td><td>未分类的自由文本</td></tr><tr><td><code>CompositeElement</code></td><td>分块处理时产生的复合元素*</td></tr></tbody></table><blockquote><p><strong>注：</strong> <code>CompositeElement</code> 是通过分块（chunking）处理产生的特殊元素类型，由一个或多个连续的文本元素组合而成。例如，多个列表项可能会被组合成一个单独的块。</p></blockquote><h2 id="三、从langchain封装到原始unstructured" tabindex="-1"><a class="header-anchor" href="#三、从langchain封装到原始unstructured"><span>三、从LangChain封装到原始Unstructured</span></a></h2><p>在第一章的示例中，我们使用了LangChain的<code>UnstructuredMarkdownLoader</code>，它是LangChain对Unstructured库的封装。接下来展示如何直接使用Unstructured库，这样可以获得更大的灵活性和控制力。</p><h3 id="_3-1-代码示例" tabindex="-1"><a class="header-anchor" href="#_3-1-代码示例"><span>3.1 代码示例</span></a></h3><p>创建一个简单的示例，尝试使用Unstructured库加载并解析一个PDF文件：</p><blockquote><p>若代码运行出现报错 <code>ImportError: libgl.so.1 cannot open shared object file no such file or directory</code>, 执行 <code>sudo apt-get install python3-opencv</code> 安装依赖库。</p></blockquote><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> unstructured</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">partition</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">auto </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> partition</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># PDF文件路径</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pdf_path </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">../../data/C2/pdf/rag.pdf</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用Unstructured加载并解析PDF文档</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">elements </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> partition</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pdf_path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    content_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">application/pdf</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 打印解析结果</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;解析完成: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">elements</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 个元素, </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> elements</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 字符&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 统计元素类型</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> collections </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Counter</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">types </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Counter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">category </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> elements</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;元素类型: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">dict</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">types</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 显示所有元素</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">所有元素:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> element </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> enumerate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">elements</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;Element </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">category</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">):&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 60</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>partition函数参数解析：</strong></p><ul><li><code>filename</code>: 文档文件路径，支持本地文件路径</li><li><code>content_type</code>: 可选参数，指定MIME类型（如&quot;application/pdf&quot;），可绕过自动文件类型检测</li><li><code>file</code>: 可选参数，文件对象，与filename二选一使用</li><li><code>url</code>: 可选参数，远程文档URL，支持直接处理网络文档</li><li><code>include_page_breaks</code>: 布尔值，是否在输出中包含页面分隔符</li><li><code>strategy</code>: 处理策略，可选&quot;auto&quot;、&quot;fast&quot;、&quot;hi_res&quot;等</li><li><code>encoding</code>: 文本编码格式，默认自动检测</li></ul><p><code>partition</code>函数使用自动文件类型检测，内部会根据文件类型路由到对应的专用函数（如PDF文件会调用<code>partition_pdf</code>）。如果需要更专业的PDF处理，可以直接使用<code>from unstructured.partition.pdf import partition_pdf</code>，它提供更多PDF特有的参数选项，如OCR语言设置、图像提取、表格结构推理等高级功能，同时性能更优。</p><blockquote><p><strong>完整代码文件</strong>：<a href="https://github.com/datawhalechina/all-in-rag/blob/main/code/C2/01_unstructured_example.py" target="_blank" rel="noopener noreferrer"><code>01_unstructured_example.py</code></a></p></blockquote><blockquote><p><a href="https://docs.unstructured.io/open-source/core-functionality/partitioning" target="_blank" rel="noopener noreferrer"><strong>Unstructured官方文档</strong></a></p></blockquote><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h2><ul><li>使用<code>partition_pdf</code>替换当前<code>partition</code>函数并分别尝试用<code>hi_res</code>和<code>ocr_only</code>进行解析，观察输出结果有何变化。</li></ul>`,31)])])}const r=i(e,[["render",d]]),p=JSON.parse('{"path":"/chapter2/1.data_load.html","title":"第一节 数据加载","lang":"zh-CN","frontmatter":{"createTime":"2025/09/28 17:32:01","title":"第一节 数据加载"},"readingTime":{"minutes":4.7,"words":1410},"git":{"createdTime":1750155436000,"updatedTime":1759129919000,"contributors":[{"name":"FutureUnreal","username":"FutureUnreal","email":"42101210307@stu.xpu.edu.cn","commits":16,"avatar":"https://avatars.githubusercontent.com/FutureUnreal?v=4","url":"https://github.com/FutureUnreal"},{"name":"UncleLLD","username":"UncleLLD","email":"duanzhch@tju.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/UncleLLD?v=4","url":"https://github.com/UncleLLD"},{"name":"1985312383","username":"1985312383","email":"56398475+1985312383@users.noreply.github.com","commits":1,"avatar":"https://avatars.githubusercontent.com/1985312383?v=4","url":"https://github.com/1985312383"}]},"filePathRelative":"chapter2/1.data_load.md","headers":[]}');export{r as comp,p as data};
