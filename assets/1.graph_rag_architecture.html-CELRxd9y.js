import{_ as n,c as e,a as i,e as l,r,o as h}from"./app-CFXp0Idr.js";const t="/all-in-rag/images/9_1_1.svg",d={};function p(c,s){const a=r("Mermaid");return h(),e("div",null,[s[0]||(s[0]=i('<blockquote><p>在前面章节的基础上，接下来构建一个更先进的图RAG系统。通过引入Neo4j图数据库和智能查询路由机制，实现真正的知识图谱增强检索，解决传统RAG在复杂查询和关系推理方面的局限性。</p></blockquote><figure><img src="'+t+`" alt="neo4j" tabindex="0" loading="lazy"><figcaption>neo4j</figcaption></figure><h2 id="一、项目背景与目标" tabindex="-1"><a class="header-anchor" href="#一、项目背景与目标"><span>一、项目背景与目标</span></a></h2><h3 id="_1-1-从传统rag到图rag的演进" tabindex="-1"><a class="header-anchor" href="#_1-1-从传统rag到图rag的演进"><span>1.1 从传统RAG到图RAG的演进</span></a></h3><p>上一章中，我们构建了基于向量检索的传统RAG系统，采用了父子文本块的分块策略，能够有效回答简单的菜谱查询。但在处理复杂的关系推理和多跳查询时仍存在明显局限：</p><ul><li><strong>关系理解缺失</strong>：虽然父子分块保持了文档结构，但无法显式建模食材、菜谱、烹饪方法之间的语义关系</li><li><strong>跨文档关联困难</strong>：难以发现不同菜谱之间的相似性、替代关系等隐含联系</li><li><strong>推理能力有限</strong>：缺乏基于知识图谱的多跳推理能力，难以回答需要复杂逻辑推理的问题</li></ul><h3 id="_1-2-图rag系统的核心优势" tabindex="-1"><a class="header-anchor" href="#_1-2-图rag系统的核心优势"><span>1.2 图RAG系统的核心优势</span></a></h3><p>通过引入知识图谱，我们的新系统将具备：</p><ul><li><strong>结构化知识表达</strong>：以图的形式显式编码实体间的语义关系</li><li><strong>增强推理能力</strong>：支持多跳推理和复杂关系查询</li><li><strong>智能查询路由</strong>：根据查询复杂度自动选择最适合的检索策略</li><li><strong>事实性与可解释性</strong>：基于图结构的推理路径提供可追溯的答案</li></ul><h2 id="二、环境配置" tabindex="-1"><a class="header-anchor" href="#二、环境配置"><span>二、环境配置</span></a></h2><blockquote><p>若需要进行外部访问，需更换本地或服务器环境</p></blockquote><h3 id="_2-1-创建虚拟环境" tabindex="-1"><a class="header-anchor" href="#_2-1-创建虚拟环境"><span>2.1 创建虚拟环境</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用conda创建环境</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">conda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> graph-rag</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> python=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3.12.7</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">conda</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> activate</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> graph-rag</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-安装核心依赖" tabindex="-1"><a class="header-anchor" href="#_2-2-安装核心依赖"><span>2.2 安装核心依赖</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> code/C9</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-neo4j数据库配置" tabindex="-1"><a class="header-anchor" href="#_2-3-neo4j数据库配置"><span>2.3 Neo4j数据库配置</span></a></h3><p>使用Docker Compose方式安装Neo4j，配置文件位于 <a href="https://github.com/datawhalechina/all-in-rag/blob/main/data/C9/docker-compose.yml" target="_blank" rel="noopener noreferrer"><code>data/C9/docker-compose.yml</code></a>：</p><h4 id="_2-3-1-启动neo4j服务" tabindex="-1"><a class="header-anchor" href="#_2-3-1-启动neo4j服务"><span>2.3.1 启动Neo4j服务</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 进入docker-compose.yml所在目录</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> data/C9</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 启动Neo4j服务</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> up</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 检查服务状态</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-访问neo4j-web界面" tabindex="-1"><a class="header-anchor" href="#_2-3-2-访问neo4j-web界面"><span>2.3.2 访问Neo4j Web界面</span></a></h4><p>启动成功后，可以通过以下方式访问：</p><ul><li><strong>Web界面</strong>：http://localhost:7474</li><li><strong>用户名</strong>：neo4j</li><li><strong>密码</strong>：all-in-rag</li></ul><blockquote><p>当前网址为本地访问，如果你是部署在远程服务器上，需要将 <code>localhost</code> 修改为你的服务器IP地址。</p></blockquote><h4 id="_2-3-3-数据导入" tabindex="-1"><a class="header-anchor" href="#_2-3-3-数据导入"><span>2.3.3 数据导入</span></a></h4><p>Docker Compose配置中包含了自动数据导入功能。启动服务时会自动执行以下步骤：</p><ol><li><strong>等待Neo4j服务就绪</strong>：通过健康检查确保数据库可用</li><li><strong>执行导入脚本</strong>：自动运行 <code>data/C9/cypher/neo4j_import.cypher</code></li><li><strong>导入菜谱数据</strong>：包括菜谱、食材、烹饪步骤等节点和关系</li></ol><p>导入的数据包括：</p><ul><li><strong>菜谱节点</strong>：包含菜名、难度、烹饪时间、菜系等信息</li><li><strong>食材节点</strong>：包含食材名称、分类、营养信息等</li><li><strong>烹饪步骤节点</strong>：包含步骤描述、烹饪方法、所需工具等</li><li><strong>关系网络</strong>：菜谱与食材、步骤之间的复杂关系</li></ul><p>如果需要手动重新导入数据：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 进入容器执行导入脚本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> neo4j-db</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cypher-shell</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> neo4j</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> all-in-rag</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /import/cypher/neo4j_import.cypher</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-milvus向量数据库配置" tabindex="-1"><a class="header-anchor" href="#_2-4-milvus向量数据库配置"><span>2.4 Milvus向量数据库配置</span></a></h3><h4 id="_2-4-1-使用docker安装milvus" tabindex="-1"><a class="header-anchor" href="#_2-4-1-使用docker安装milvus"><span>2.4.1 使用Docker安装Milvus</span></a></h4><blockquote><p>如果前面已经安装过了可以跳过此步，通过 <code>docker-compose ps</code> 确认Milvus服务正在运行即可。</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 下载Milvus standalone配置文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">wget</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/milvus-io/milvus/releases/download/v2.5.11/milvus-standalone-docker-compose.yml</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -O</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker-compose.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 启动Milvus</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> up</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-验证安装" tabindex="-1"><a class="header-anchor" href="#_2-4-2-验证安装"><span>2.4.2 验证安装</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 检查Milvus服务状态</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-配置连接参数" tabindex="-1"><a class="header-anchor" href="#_2-5-配置连接参数"><span>2.5 配置连接参数</span></a></h3><p>在项目根目录创建 <code>.env</code> 文件：</p><div class="language-env line-numbers-mode" data-highlighter="shiki" data-ext="env" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-env"><span class="line"><span># Neo4j配置</span></span>
<span class="line"><span>NEO4J_URI=bolt://localhost:7687</span></span>
<span class="line"><span>NEO4J_USER=neo4j</span></span>
<span class="line"><span>NEO4J_PASSWORD=all-in-rag</span></span>
<span class="line"><span>NEO4J_DATABASE=neo4j</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Milvus配置</span></span>
<span class="line"><span>MILVUS_HOST=localhost</span></span>
<span class="line"><span>MILVUS_PORT=19530</span></span>
<span class="line"><span></span></span>
<span class="line"><span># LLM API配置</span></span>
<span class="line"><span>MOONSHOT_API_KEY=your_api_key_here</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、系统架构设计" tabindex="-1"><a class="header-anchor" href="#三、系统架构设计"><span>三、系统架构设计</span></a></h2><h3 id="_3-1-整体架构" tabindex="-1"><a class="header-anchor" href="#_3-1-整体架构"><span>3.1 整体架构</span></a></h3><p>我们的图RAG系统采用模块化设计，包含以下核心组件：</p>`,42)),l(a,{code:"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"}),s[1]||(s[1]=i(`<h3 id="_3-2-核心模块说明" tabindex="-1"><a class="header-anchor" href="#_3-2-核心模块说明"><span>3.2 核心模块说明</span></a></h3><h4 id="图数据准备模块-graphdatapreparationmodule" tabindex="-1"><a class="header-anchor" href="#图数据准备模块-graphdatapreparationmodule"><span>图数据准备模块 (GraphDataPreparationModule)</span></a></h4><ul><li><strong>功能</strong>：连接Neo4j数据库，加载图数据，构建结构化菜谱文档</li><li><strong>特点</strong>：支持图数据到文档的智能转换，保持知识结构完整性</li></ul><h4 id="向量索引模块-milvusindexconstructionmodule" tabindex="-1"><a class="header-anchor" href="#向量索引模块-milvusindexconstructionmodule"><span>向量索引模块 (MilvusIndexConstructionModule)</span></a></h4><ul><li><strong>功能</strong>：构建和管理Milvus向量索引，支持语义相似度检索</li><li><strong>特点</strong>：使用BGE-small-zh-v1.5模型，512维向量空间</li></ul><h4 id="混合检索模块-hybridretrievalmodule" tabindex="-1"><a class="header-anchor" href="#混合检索模块-hybridretrievalmodule"><span>混合检索模块 (HybridRetrievalModule)</span></a></h4><ul><li><strong>功能</strong>：传统的混合检索策略，结合向量检索和图扩展</li><li><strong>特点</strong>：双层检索（实体级+主题级），RRF轮询融合</li></ul><h4 id="图rag检索模块-graphragretrieval" tabindex="-1"><a class="header-anchor" href="#图rag检索模块-graphragretrieval"><span>图RAG检索模块 (GraphRAGRetrieval)</span></a></h4><ul><li><strong>功能</strong>：基于图结构的高级检索，支持多跳推理和子图提取</li><li><strong>特点</strong>：图查询理解、多跳遍历、知识子图提取</li></ul><h4 id="智能查询路由-intelligentqueryrouter" tabindex="-1"><a class="header-anchor" href="#智能查询路由-intelligentqueryrouter"><span>智能查询路由 (IntelligentQueryRouter)</span></a></h4><ul><li><strong>功能</strong>：分析查询特征，自动选择最适合的检索策略</li><li><strong>特点</strong>：LLM驱动的查询分析，动态策略选择</li></ul><h4 id="生成集成模块-generationintegrationmodule" tabindex="-1"><a class="header-anchor" href="#生成集成模块-generationintegrationmodule"><span>生成集成模块 (GenerationIntegrationModule)</span></a></h4><ul><li><strong>功能</strong>：基于检索结果生成最终答案，支持流式输出</li><li><strong>特点</strong>：自适应生成策略，错误处理与重试机制</li></ul><h3 id="_3-3-数据流程" tabindex="-1"><a class="header-anchor" href="#_3-3-数据流程"><span>3.3 数据流程</span></a></h3><ol><li><p><strong>数据准备阶段</strong>：</p><ul><li>从Neo4j加载图数据（菜谱、食材、步骤节点及其关系）</li><li>构建结构化菜谱文档，保持知识完整性</li><li>进行智能文档分块，支持章节和长度双重分块策略</li><li>构建Milvus向量索引，支持语义检索</li></ul></li><li><p><strong>查询处理阶段</strong>：</p><ul><li>用户输入查询</li><li>智能查询路由器分析查询特征（复杂度、关系密集度、推理需求）</li><li>根据分析结果选择检索策略： <ul><li>简单查询 → 传统混合检索</li><li>复杂推理 → 图RAG检索</li><li>中等复杂 → 组合检索策略</li></ul></li><li>执行相应的检索操作</li><li>生成模块基于检索结果生成答案</li></ul></li><li><p><strong>错误处理与降级</strong>：</p><ul><li>高级策略失败时自动降级到传统混合检索</li><li>传统混合检索失败时返回系统异常</li><li>支持流式输出中断时的自动重试机制</li></ul></li></ol><h2 id="四、项目文件结构" tabindex="-1"><a class="header-anchor" href="#四、项目文件结构"><span>四、项目文件结构</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>code/C9/</span></span>
<span class="line"><span>├── main.py                          # 主程序入口</span></span>
<span class="line"><span>├── config.py                        # 配置文件</span></span>
<span class="line"><span>├── requirements.txt                 # 依赖包列表</span></span>
<span class="line"><span>└── rag_modules/                     # RAG模块包</span></span>
<span class="line"><span>    ├── __init__.py</span></span>
<span class="line"><span>    ├── graph_data_preparation.py    # 图数据准备模块</span></span>
<span class="line"><span>    ├── milvus_index_construction.py # Milvus索引构建模块</span></span>
<span class="line"><span>    ├── hybrid_retrieval.py          # 混合检索模块</span></span>
<span class="line"><span>    ├── graph_rag_retrieval.py       # 图RAG检索模块</span></span>
<span class="line"><span>    ├── intelligent_query_router.py  # 智能查询路由器</span></span>
<span class="line"><span>    └── generation_integration.py    # 生成集成模块</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、快速开始" tabindex="-1"><a class="header-anchor" href="#五、快速开始"><span>五、快速开始</span></a></h2><h3 id="_5-1-启动系统" tabindex="-1"><a class="header-anchor" href="#_5-1-启动系统"><span>5.1 启动系统</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 确保Neo4j和Milvus服务已启动</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-系统初始化" tabindex="-1"><a class="header-anchor" href="#_5-2-系统初始化"><span>5.2 系统初始化</span></a></h3><p>首次运行时，系统会自动：</p><ol><li>检查并连接Neo4j和Milvus数据库</li><li>加载图数据并构建菜谱文档</li><li>创建向量索引</li><li>初始化各个检索模块</li><li>显示系统统计信息</li></ol><h3 id="_5-3-交互式问答" tabindex="-1"><a class="header-anchor" href="#_5-3-交互式问答"><span>5.3 交互式问答</span></a></h3><p>系统启动后，可以进行交互式问答：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>您的问题: 川菜有哪些特色菜？</span></span>
<span class="line"><span>您的问题: 如何制作宫保鸡丁？</span></span>
<span class="line"><span>您的问题: 减肥期间适合吃什么菜？</span></span>
<span class="line"><span>您的问题: stats  # 查看系统统计</span></span>
<span class="line"><span>您的问题: quit   # 退出系统</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26))])}const k=n(d,[["render",p]]),g=JSON.parse('{"path":"/chapter9/1.graph_rag_architecture.html","title":"第一节 图RAG系统架构与环境配置","lang":"zh-CN","frontmatter":{"createTime":"2025/09/28 17:32:01","title":"第一节 图RAG系统架构与环境配置"},"readingTime":{"minutes":11.02,"words":3305},"git":{"createdTime":1753883942000,"updatedTime":1759129919000,"contributors":[{"name":"FutureUnreal","username":"FutureUnreal","email":"42101210307@stu.xpu.edu.cn","commits":2,"avatar":"https://avatars.githubusercontent.com/FutureUnreal?v=4","url":"https://github.com/FutureUnreal"},{"name":"1985312383","username":"1985312383","email":"56398475+1985312383@users.noreply.github.com","commits":1,"avatar":"https://avatars.githubusercontent.com/1985312383?v=4","url":"https://github.com/1985312383"}]},"filePathRelative":"chapter9/1.graph_rag_architecture.md","headers":[]}');export{k as comp,g as data};
